{"name": "test_login[getdata1]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//span[text()= 'PIM']\"}\n  (Session info: headless chrome=109.0.5414.120)\nStacktrace:\nBacktrace:\n\t(No symbol) [0x00496643]\n\t(No symbol) [0x0042BE21]\n\t(No symbol) [0x0032DA9D]\n\t(No symbol) [0x00361342]\n\t(No symbol) [0x0036147B]\n\t(No symbol) [0x00398DC2]\n\t(No symbol) [0x0037FDC4]\n\t(No symbol) [0x00396B09]\n\t(No symbol) [0x0037FB76]\n\t(No symbol) [0x003549C1]\n\t(No symbol) [0x00355E5D]\n\tGetHandleVerifier [0x0070A142+2497106]\n\tGetHandleVerifier [0x007385D3+2686691]\n\tGetHandleVerifier [0x0073BB9C+2700460]\n\tGetHandleVerifier [0x00543B10+635936]\n\t(No symbol) [0x00434A1F]\n\t(No symbol) [0x0043A418]\n\t(No symbol) [0x0043A505]\n\t(No symbol) [0x0044508B]\n\tBaseThreadInitThunk [0x76746BD9+25]\n\tRtlGetFullPathName_UEx [0x77368FD2+1218]\n\tRtlGetFullPathName_UEx [0x77368F9D+1165]", "trace": "self = <Test.test_e2e.TestMain object at 0x00000227A82D1310>\ngetdata = {'fname': 'Digvijay', 'lname': 'Tikka', 'mname': 'Tukaram', 'password': 'admin123', ...}\n\n    def test_login(self, getdata):  # getdata for passing data from fixture data provider\n    \n        log = self.get_logger()  # Object of logger class\n    \n        # Object Of HomePage Class\n        HP = HomePage(self.driver)\n    \n        # Object of HomePage Only created, object for HomePage is created in HomePage's so that i will return UserHomePage,\n        # we are chaining pages functionality wise\n    \n        # Passing Methods From HomePage, And Doing Actions On Them As Per The Need\n        HP.send_username().send_keys(getdata[\"username\"])\n        # self.take_screenshot(\"username_entered.png\")\n        log.info(\"Username Entered as:\" + getdata[\"username\"])\n    \n        HP.send_password().send_keys(getdata[\"password\"])\n        # self.take_screenshot(\"password_entered.png\")\n        log.info(\"Password Entered as:\" + getdata[\"password\"])\n    \n        UHP = HP.click_login()  # Click is done in page object, and returned object of UserHomePage\n        log.info(\"Login Button Clicked\")\n    \n>       UHP.pim_link().click()\n\nTest\\test_e2e.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPageObjects\\UserHomePage.py:20: in pim_link\n    return self.driver.find_element(*UserHomePage.PIM_Link)\nE:\\Virtual_Env\\Py_Sel_Framework\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:861: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nE:\\Virtual_Env\\Py_Sel_Framework\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:444: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000227A7C97850>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...unk [0x76746BD9+25]\\\\n\\\\tRtlGetFullPathName_UEx [0x77368FD2+1218]\\\\n\\\\tRtlGetFullPathName_UEx [0x77368F9D+1165]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = \"{}.{}\".format(frame[\"className\"], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//span[text()= 'PIM']\"}\nE         (Session info: headless chrome=109.0.5414.120)\nE       Stacktrace:\nE       Backtrace:\nE       \t(No symbol) [0x00496643]\nE       \t(No symbol) [0x0042BE21]\nE       \t(No symbol) [0x0032DA9D]\nE       \t(No symbol) [0x00361342]\nE       \t(No symbol) [0x0036147B]\nE       \t(No symbol) [0x00398DC2]\nE       \t(No symbol) [0x0037FDC4]\nE       \t(No symbol) [0x00396B09]\nE       \t(No symbol) [0x0037FB76]\nE       \t(No symbol) [0x003549C1]\nE       \t(No symbol) [0x00355E5D]\nE       \tGetHandleVerifier [0x0070A142+2497106]\nE       \tGetHandleVerifier [0x007385D3+2686691]\nE       \tGetHandleVerifier [0x0073BB9C+2700460]\nE       \tGetHandleVerifier [0x00543B10+635936]\nE       \t(No symbol) [0x00434A1F]\nE       \t(No symbol) [0x0043A418]\nE       \t(No symbol) [0x0043A505]\nE       \t(No symbol) [0x0044508B]\nE       \tBaseThreadInitThunk [0x76746BD9+25]\nE       \tRtlGetFullPathName_UEx [0x77368FD2+1218]\nE       \tRtlGetFullPathName_UEx [0x77368F9D+1165]\n\nE:\\Virtual_Env\\Py_Sel_Framework\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:249: NoSuchElementException"}, "attachments": [{"name": "log", "source": "c84f3033-1849-4b59-a3c5-96d35f08a339-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "getdata", "value": "{'username': 'Admin122', 'password': 'admin123', 'fname': 'Digvijay', 'mname': 'Tukaram', 'lname': 'Tikka'}"}], "start": 1675225391655, "stop": 1675225402898, "uuid": "4846b27a-6263-4911-9c38-7f5de01ae99b", "historyId": "39728d7215900163713dc83050bebf1b", "testCaseId": "42d8211a0977b8468138fd3500b1d742", "fullName": "Test.test_e2e.TestMain#test_login", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "Test"}, {"name": "suite", "value": "test_e2e"}, {"name": "subSuite", "value": "TestMain"}, {"name": "host", "value": "Digvijayt-VD3"}, {"name": "thread", "value": "18588-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test.test_e2e"}]}